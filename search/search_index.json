{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Morecantile","text":"<p> <p>Construct and use map tile grids (a.k.a TileMatrixSet / TMS).</p> </p> <p> </p> <p>Documentation: developmentseed.org/morecantile/</p> <p>Source Code: developmentseed/morecantile</p> <p>Morecantile is like mercantile (the best tool to work with Web Mercator tile indexes), but with support for other TileMatrixSet grids.</p> <p>Morecantile follows the OGC Two Dimensional Tile Matrix Set specification 2.0 found in https://docs.ogc.org/is/17-083r4/17-083r4.html</p> Morecantile Version OGC Specification Version Link &gt;=4.0 2.0 docs.ogc.org/is/17-083r4/17-083r4.html =&lt;3.0 1.0 docs.opengeospatial.org/is/17-083r2/17-083r2.html"},{"location":"#install","title":"Install","text":"<pre><code>$ python -m pip install -U pip\n$ python -m pip install morecantile\n\n# Or install from source:\n$ python -m pip install -U pip\n$ python -m pip install git+https://github.com/developmentseed/morecantile.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\n# Get TMS bounding box\nprint(tms.xy_bbox)\n&gt;&gt;&gt; BoundingBox(\n    left=-20037508.342789244,\n    bottom=-20037508.34278919,\n    right=20037508.34278919,\n    top=20037508.342789244,\n)\n\n# Get the bounds for tile Z=4, X=10, Y=10 in the TMS's CRS (e.g epsg:3857)\nprint(tms.xy_bounds(morecantile.Tile(10, 10, 4)))\n&gt;&gt;&gt; BoundingBox(\n    left=5009377.085697308,\n    bottom=-7514065.628545959,\n    right=7514065.628545959,\n    top=-5009377.085697308,\n)\n\n# Get the bounds for tile Z=4, X=10, Y=10 in Geographic CRS (e.g epsg:4326)\nprint(tms.bounds(morecantile.Tile(10, 10, 4)))\n&gt;&gt;&gt; BoundingBox(\n    left=44.999999999999964,\n    bottom=-55.776573018667634,\n    right=67.4999999999999,\n    top=-40.97989806962009,\n)\n</code></pre> <p>More info can be found at developmentseed.org/morecantile/usage/</p>"},{"location":"#defaults-grids","title":"Defaults Grids","text":"<p><code>morecantile</code> provides a set of default TileMatrixSets:</p> <ul> <li>CDB1GlobalGrid *: CDB 1 Global Grid - EPGS:4326 (WGS84)</li> <li>CanadianNAD83_LCC: Lambert conformal conic NAD83 for Canada - EPSG:3978</li> <li>EuropeanETRS89_LAEAQuad: ETRS89-extended / LAEA Europe - EPGS:3035</li> <li>GNOSISGlobalGrid *: GNOSIS Global Grid - EPGS:4326 (WGS84)</li> <li>LINZAntarticaMapTilegrid: LINZ Antarctic Map Tile Grid (Ross Sea Region) - EPSG:5482</li> <li>NZTM2000Quad: LINZ NZTM2000 Map Tile Grid - EPSG:2193</li> <li>UPSAntarcticWGS84Quad: Universal Polar Stereographic WGS 84 Quad for Antarctic - EPSG:5042</li> <li>UPSArcticWGS84Quad: Universal Polar Stereographic WGS 84 Quad for Arctic - EPSG:5041</li> <li>UTM31WGS84Quad: Example of UTM grid - EPSG:32631</li> <li>WebMercatorQuad: Spherical Mercator - EPGS:3857 (default grid for Web Mercator based maps)</li> <li>WGS1984Quad: EPSG:4326 for the World - EPGS:4326 (WGS84)</li> <li>WorldCRS84Quad: CRS84 for the World</li> <li>WorldMercatorWGS84Quad: Elliptical Mercator projection - EPGS:3395</li> </ul> <p>* TileMatrixSets with variable Matrix Width (see docs.ogc.org/is/17-083r4/17-083r4.html#toc15)</p> <p>ref: schemas.opengis.net/tms/2.0/json/examples/tilematrixset/</p>"},{"location":"#implementations","title":"Implementations","text":"<ul> <li>rio-tiler: Create tile from raster using Morecantile TMS.</li> <li>titiler: A modern dynamic tile server built on top of FastAPI and Rasterio/GDAL.</li> <li>tipg: OGC Features and Tiles API.</li> <li>planetcantile: Tile matrix sets for other planets.</li> <li>supermorecado: Extend the functionality of morecantile with additional commands.</li> </ul>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed</p>"},{"location":"cli/","title":"Morecantile CLI","text":"<p>The CLI is heavily inspired from mercantile's CLI.</p> <pre><code>morecantile --help\nUsage: morecantile [OPTIONS] COMMAND [ARGS]...\n\n  Command line interface for the Morecantile Python package.\n\nOptions:\n  -v, --verbose  Increase verbosity.\n  -q, --quiet    Decrease verbosity.\n  --version      Show the version and exit.\n  --help         Show this message and exit.\n\nCommands:\n  tiles           Print tiles that overlap or contain a lng/lat point, bounding box, or GeoJSON objects.\n  shapes          Print the shapes of tiles as GeoJSON.\n  custom          Create Custom TileMatrixSet\n  tms             Print TileMatrixSet JSON document.\n  tms-to-geojson  Print TileMatrixSet MatrixSet as GeoJSON.\n</code></pre>"},{"location":"cli/#tiles","title":"Tiles","text":"<p>With the tiles command you can write descriptions of tiles intersecting with a geographic point, bounding box, or GeoJSON object.</p> <pre><code>$ morecantile tiles --help\nUsage: morecantile tiles [OPTIONS] [ZOOM] [INPUT]\n\n  Lists TMS tiles at ZOOM level intersecting GeoJSON [west, south, east,\n  north] bounding boxen, features, or collections read from stdin. Output is\n  a JSON [x, y, z] array.\n\n  Input may be a compact newline-delimited sequences of JSON or a pretty-\n  printed ASCII RS-delimited sequence of JSON (like\n  https://tools.ietf.org/html/rfc8142 and\n  https://tools.ietf.org/html/rfc7159).\n\n  Example: $ echo \"[-105.05, 39.95, -105, 40]\" | morecantiles tiles 12\n  Output: [852, 1550, 12] [852, 1551, 12] [853, 1550, 12] [853, 1551, 12]\n\nOptions:\n  --identifier TileMatrixSet identifier.\n               One of :\n                - CDB1GlobalGrid\n                - CanadianNAD83_LCC\n                - EuropeanETRS89_LAEAQuad\n                - GNOSISGlobalGrid\n                - LINZAntarticaMapTilegrid\n                - NZTM2000Quad\n                - UPSAntarcticWGS84Quad\n                - UPSArcticWGS84Quad\n                - UTM31WGS84Quad\n                - WebMercatorQuad\n                - WGS1984Quad\n                - WorldCRS84Quad\n                - WorldMercatorWGS84Quad\n  --seq / --lf                    Write a RS-delimited JSON sequence (default is LF).\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#shapes","title":"Shapes","text":"<p>The shapes command writes TMS tile shapes to several forms of GeoJSON.</p> <pre><code>$ morecantile shapes --help\nUsage: morecantile shapes [OPTIONS] [INPUT]\n\n  Reads one or more Web Mercator tile descriptions from stdin and writes\n  either a GeoJSON feature collection (the default) or a JSON sequence of\n  GeoJSON features/collections to stdout.\n\n  Input may be a compact newline-delimited sequences of JSON or a pretty-\n  printed ASCII RS-delimited sequence of JSON (like\n  https://tools.ietf.org/html/rfc8142 and\n  https://tools.ietf.org/html/rfc7159).\n\n  Tile descriptions may be either an [x, y, z] array or a JSON object of the\n  form {\"tile\": [x, y, z], \"properties\": {\"name\": \"foo\", ...}}\n\n  In the latter case, the properties object will be used to update the\n  properties object of the output feature.\n\nOptions:\n  --identifier TileMatrixSet identifier.\n               One of :\n                - CDB1GlobalGrid\n                - CanadianNAD83_LCC\n                - EuropeanETRS89_LAEAQuad\n                - GNOSISGlobalGrid\n                - LINZAntarticaMapTilegrid\n                - NZTM2000Quad\n                - UPSAntarcticWGS84Quad\n                - UPSArcticWGS84Quad\n                - UTM31WGS84Quad\n                - WebMercatorQuad\n                - WGS1984Quad\n                - WorldCRS84Quad\n                - WorldMercatorWGS84Quad\n  --precision INTEGER             Decimal precision of coordinates.\n  --indent INTEGER                Indentation level for JSON output\n  --compact / --no-compact        Use compact separators (',', ':').\n  --projected / --geographic      Output coordinate system\n  --seq                           Write a RS-delimited JSON sequence (default is LF).\n  --feature                       Output as sequence of GeoJSON features (the default).\n  --bbox                          Output as sequence of GeoJSON bbox arrays.\n  --collect                       Output as a GeoJSON feature collections.\n  --extents / --no-extents        Write shape extents as ws-separated strings (default is False).\n  --buffer FLOAT                  Shift shape x and y values by a constant number\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#custom","title":"Custom","text":"<p>With the custom command you can create custom TileMatrixSet documents.</p> <pre><code>$ morecantile custom --help\nUsage: morecantile custom [OPTIONS]\n\n  Create Custom TMS.\n\nOptions:\n  --epsg INTEGER         EPSG number.  [required]\n  --extent FLOAT...      left, bottom, right, top Bounding box of the Tile Matrix Set.  [required]\n  --name TEXT            Identifier of the custom TMS.\n  --minzoom INTEGER      Minumum Zoom level.\n  --maxzoom INTEGER      Maximum Zoom level.\n  --tile-width INTEGER   Width of each tile.\n  --tile-height INTEGER  Height of each tile.\n  --extent-epsg INTEGER  EPSG number for the bounding box.\n  --title TEXT           Tile Matrix Set title.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#tms","title":"tms","text":"<p>The tms command returns the TileMatrixSet document</p> <pre><code>$ morecantile tms --help\nUsage: morecantile tms [OPTIONS]\n\n  Print TMS JSON.\n\nOptions:\n  --identifier TileMatrixSet identifier.\n               One of :\n                - CDB1GlobalGrid\n                - CanadianNAD83_LCC\n                - EuropeanETRS89_LAEAQuad\n                - GNOSISGlobalGrid\n                - LINZAntarticaMapTilegrid\n                - NZTM2000Quad\n                - UPSAntarcticWGS84Quad\n                - UPSArcticWGS84Quad\n                - UTM31WGS84Quad\n                - WebMercatorQuad\n                - WGS1984Quad\n                - WorldCRS84Quad\n                - WorldMercatorWGS84Quad\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#tms-to-geojson","title":"tms-to-geojson","text":"<p>Create a GeoJSON from a TMS document</p> <pre><code>$ morecantile tms-to-geojson --help\nUsage: morecantile tms-to-geojson [OPTIONS] [INPUT]\n\n  Print TMS document as GeoJSON.\n\nOptions:\n  --level INTEGER             Zoom/Matrix level.  [required]\n  --precision INTEGER         Decimal precision of coordinates.\n  --indent INTEGER            Indentation level for JSON output\n  --compact / --no-compact    Use compact separators (',', ':').\n  --projected / --geographic  Output coordinate system\n  --seq                       Write a RS-delimited JSON sequence (default is LF).\n  --feature                   Output as sequence of GeoJSON features (the default).\n  --bbox                      Output as sequence of GeoJSON bbox arrays.\n  --collect                   Output as a GeoJSON feature collections.\n  --extents / --no-extents    Write shape extents as ws-separated strings (default is False).\n  --buffer FLOAT              Shift shape x and y values by a constant number\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"cli/#examples","title":"Examples","text":"<pre><code>$ rio bounds eu.tif | morecantile tiles --zoom 1  # like mercantiles\n\n$ morecantile custom --epsg 3413 --extent -4194300 -4194300 4194300 4194300 --minzoom 0 --maxzoom 8 --tile-width 512 --tile-height 512 | morecantile tms-to-geojson --level 3 --projected --collect &gt; l3.geojson\n\n$ rio bounds eu.tif | morecantile tiles 4 --identifier EuropeanETRS89_LAEAQuad  | morecantile shapes --identifier EuropeanETRS89_LAEAQuad --collect &gt; z4.geojson\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome.</p> <p>dev install</p> <pre><code>$ git clone https://github.com/developmentseed/morecantile.git\n$ cd morecantile\n$ python -m pip install -e .[\"dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov morecantile --cov-report term-missing -s -vv\n</code></pre>"},{"location":"contributing/#pre-commit","title":"pre-commit","text":"<p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"contributing/#performance-tests","title":"Performance tests","text":"<pre><code>python -m pip install -e \".[benchmark]\"\npython -m pytest tests/benchmarks.py --benchmark-only --benchmark-columns 'min, max, mean, median' --benchmark-sort 'min'\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>$ git clone https://github.com/developmentseed/morecantile.git\n$ cd morecantile\n$ python -m pip install -e .[\"docs\"]\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>$ mkdocs serve -f docs/mkdocs.yml\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>$ mkdocs gh-deploy -f docs/mkdocs.yml\n</code></pre>"},{"location":"release-notes/","title":"Release","text":""},{"location":"release-notes/#unreleased","title":"Unreleased","text":"<ul> <li>use <code>WGS84</code> as default CRS for <code>TileMatrixSet.feature</code> GeoJSON response (as per specification)</li> <li>add <code>geographic_crs</code> option for <code>TileMatrixSet.feature</code> method</li> <li> <p>update non-WGS84 CRS notation in <code>TileMatrixSet.feature</code> GeoJSON response</p> <pre><code># before\n\"properties\": {\n    \"crs\": {\n        \"type\": \"EPSG\",\n        \"properties\": {\"code\": 3857},\n    }\n}\n\n# now\n\"properties\": {\n    \"crs\": {\n        \"type\": \"name\",\n        \"properties\": {\"name\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"},\n    }\n    # or\n    \"crs\": {\n        \"type\": \"wkt\",\n         \"properties\": {\"wkt\": \"...\"}},\n    }\n}\n</code></pre> </li> <li> <p>rename <code>grid_name -&gt; tms</code> and <code>grid_crs -&gt; tms_crs</code> property names in <code>TileMatrixSet.feature</code> GeoJSON response breaking change</p> </li> <li> <p>check tile's zoom against TMS's <code>maxzoom</code> in <code>TileMatrixSet.is_valid</code> and add <code>strict=True|False</code> options breaking change</p> <pre><code>import morecantile\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\n# before\nassert tms.is_valid(0, 0, 25)\n&gt;&gt; UserWarning: TileMatrix not found for level: 25 - Creating values from TMS Scale.\n\n# now\nassert tms.is_valid(0, 0, 25), \"Tile(0, 0, 25) is not valid\"\n&gt;&gt; AssertionError: Tile(0, 0, 25) is not valid\n\nassert tms.is_valid(0, 0, 25, strict=False)\n&gt;&gt; UserWarning: TileMatrix not found for level: 25 - Creating values from TMS Scale.\n</code></pre> </li> <li> <p>remove <code>truncate_lnglat</code> from TileMatrixSet class breaking change</p> </li> <li>remove python 3.8, 3.9 and 3.10 support</li> <li>add <code>geographic_crs</code> option in <code>TileMatrixSet.tiles</code> and <code>TileMatrixSet.tile</code> methods</li> <li>make every <code>TileMatrixSet</code>'s attribute frozen </li> <li>rename <code>morecantile.defaults.TileMatrixSets.tms</code> attribute to <code>tilematrixsets</code> breaking change</li> <li>make sure that <code>morecantile.defaults.TileMatrixSets.get(name)</code> returns a copy of the TMS object</li> <li>add <code>MORECANTILE_DEFAULT_GEOGRAPHIC_CRS</code> environment variable to control the default Geographic CRS</li> <li>add <code>TileMatrixSet.set_geographic_crs(crs: pyproj.CRS)</code> method to overwrite the geographic CRS</li> </ul>"},{"location":"release-notes/#620-2024-12-19","title":"6.2.0 (2024-12-19)","text":"<ul> <li>add python 3.13 support</li> <li>update pyproj dependency version to <code>&gt;=3.1,&lt;4.0</code></li> </ul>"},{"location":"release-notes/#610-2024-10-17","title":"6.1.0 (2024-10-17)","text":"<ul> <li>add <code>_tile_matrices_idx: Dict[str, int]</code> private attribute to improve <code>matrices</code> lookup</li> <li>change <code>xy_bounds()</code> and <code>bounds()</code> methods to avoid calculation duplication</li> </ul>"},{"location":"release-notes/#600-2024-10-16","title":"6.0.0 (2024-10-16)","text":"<ul> <li>remove <code>_geographic_crs</code> private attribute in <code>TileMatrixSet</code> model breaking change</li> <li>use <code>crs.geodetic_crs</code> property as <code>geographic_crs</code> breaking change</li> </ul>"},{"location":"release-notes/#542-2024-08-29","title":"5.4.2 (2024-08-29)","text":"<ul> <li>better handle anti-meridian crossing bbox in <code>tms.tiles()</code> (author @ljstrnadiii, developmentseed/morecantile!154)</li> </ul>"},{"location":"release-notes/#541-2024-08-27","title":"5.4.1 (2024-08-27)","text":"<ul> <li>ensure <code>TileMatrixSet._geographic_crs</code> is a pyproj CRS object (author @AndrewAnnex, developmentseed/morecantile!152)</li> <li>add <code>python 3.12</code> support</li> </ul>"},{"location":"release-notes/#540-2024-08-20","title":"5.4.0 (2024-08-20)","text":"<ul> <li>adds --tms optional argument to the shapes and tiles cli tools (author @AndrewAnnex, developmentseed/morecantile!151)</li> </ul>"},{"location":"release-notes/#531-2024-07-26","title":"5.3.1 (2024-07-26)","text":"<ul> <li>handle 180<sup>th</sup> meridian case for <code>tms.tiles()</code> (author @ljstrnadiii, developmentseed/morecantile!150)</li> </ul>"},{"location":"release-notes/#530-2024-02-09","title":"5.3.0 (2024-02-09)","text":"<ul> <li>enable custom decimation value for in <code>TileMatrixSet.custom</code> method (author @mccarthyryanc, developmentseed/morecantile!146)</li> </ul>"},{"location":"release-notes/#523-2024-02-02","title":"5.2.3 (2024-02-02)","text":"<ul> <li>update pydantic <code>Field</code> usage to avoid deprecation in 3.0</li> </ul>"},{"location":"release-notes/#522-2024-01-25","title":"5.2.2 (2024-01-25)","text":"<ul> <li>fix <code>id</code> for <code>WGS1984Quad</code> TileMatrixSet (from <code>WorldCRS84Quad</code> to <code>WGS1984Quad</code>)</li> </ul>"},{"location":"release-notes/#521-2024-01-18","title":"5.2.1 (2024-01-18)","text":"<ul> <li> <p>fix <code>CRS</code> WKT type from <code>string</code> to <code>Object</code> (PROJJSON) (ref: opengeospatial/2D-Tile-Matrix-Set#89).</p> <pre><code># Before\nwkt = pyproj.CRS.from_epsg(3857).to_wkt()\nTileMatrixSet(\n    ...\n    crs={\"wkt\": wkt}\n)\n\n# Now\nwkt = pyproj.CRS.from_epsg(3857).to_json_dict()\nTileMatrixSet(\n    ...\n    crs={\"wkt\": wkt}\n)\n</code></pre> </li> </ul>"},{"location":"release-notes/#520-2024-01-18","title":"5.2.0 (2024-01-18)","text":"<ul> <li> <p>fix <code>CRS</code> parsing to allow <code>wkt ({\"wkt\": ...})</code> and <code>uri ({\"uri\": ...})</code> defined CRS</p> <pre><code>TileMatrixSet(\n    ...\n    crs=\"http://www.opengis.net/def/crs/EPSG/0/3857\"\n)\n\nTileMatrixSet(\n    ...\n    crs={\"uri\": \"http://www.opengis.net/def/crs/EPSG/0/3857\"}\n)\n\nwkt = pyproj.CRS.from_epsg(3857).to_wkt()\nTileMatrixSet(\n    ...\n    crs={\"wkt\": wkt}\n)\n</code></pre> </li> <li> <p>update <code>TileMatrixSet</code> representation to use CRS's URI</p> </li> <li>remove default for <code>TileMatrixSet.pointOfOrigin</code> attribute (required)</li> <li>add <code>topLeft</code> default for <code>TileMatrixSet.cornerOfOrigin</code> attribute</li> <li>renamed <code>morecantile.models.CRSType</code> -&gt; <code>morecantile.models.CRS</code></li> </ul>"},{"location":"release-notes/#510-2024-01-08","title":"5.1.0 (2024-01-08)","text":"<ul> <li>Simplify bounds calculation by using <code>TileMatrix.cellSize</code> instead of <code>TileMatrix.scaleDenominator</code></li> <li>remove <code>TileMatrixSet._resolution</code> private method</li> </ul>"},{"location":"release-notes/#502-2023-12-01","title":"5.0.2 (2023-12-01)","text":"<ul> <li>Remove alias tiles in <code>.parent()</code>, <code>.children()</code>, <code>.neighbors()</code> and <code>.tiles()</code> methods for Variable Matrix Width TileMatrixSets (developmentseed/morecantile!136)</li> </ul>"},{"location":"release-notes/#501-2023-12-01-deleted","title":"5.0.1 (2023-12-01) [DELETED]","text":"<ul> <li>Remove alias tiles in <code>.parent()</code>, <code>.children()</code>, <code>.neighbors()</code> and <code>.tiles()</code> methods for Variable Matrix Width TileMatrixSets (developmentseed/morecantile!136)</li> </ul>"},{"location":"release-notes/#500-2023-07-24","title":"5.0.0 (2023-07-24)","text":"<ul> <li> <p>update pydantic requirement to <code>~=2.0</code></p> </li> <li> <p>add support for TileMatrixSets with Variable Matrix Width</p> </li> <li> <p>add <code>variableMatrixWidths</code> to the <code>TileMatrix</code> model</p> </li> <li> <p>add <code>TileMatrixSet._lr()</code> (and <code>lr()</code>) to retrieve the lower right coordinates of a tile (instead of using upper-left of tile+1)</p> </li> <li> <p>switch to <code>functools.cached_property</code> to cache properties (instead of cachetools.LRUcache)</p> </li> <li> <p>rename <code>_is_quadtree</code> property to <code>is_quadtree</code> in <code>TileMatrixSet</code> model</p> </li> <li> <p>fix possible bug in <code>TileMatrixSet._tile()</code> (and <code>.tile()</code>) method to make sure x or y are not greater than <code>matrixWidth - 1</code> or <code>matrixHeight - 1</code></p> </li> </ul>"},{"location":"release-notes/#430-2023-07-11","title":"4.3.0 (2023-07-11)","text":"<ul> <li>add <code>.srs</code> property to <code>CRSType</code></li> <li>forward arguments to <code>pyproj.CRS</code> methods for <code>to_epsg()</code>, <code>to_wkt()</code>, <code>to_proj4()</code> and <code>to_json()</code> CRSType methods</li> </ul>"},{"location":"release-notes/#421-2023-07-02","title":"4.2.1 (2023-07-02)","text":"<ul> <li>limit pydantic requirement to `~=1.0``</li> </ul>"},{"location":"release-notes/#420-2023-06-09","title":"4.2.0 (2023-06-09)","text":"<ul> <li>add <code>to_proj4</code> and <code>to_dict</code> and <code>to_json</code> methods to <code>CRSType</code></li> <li>remove <code>TileMatrixSet._crs</code> (replaced with <code>TileMatrixSet.crs._pyproj_crs</code>)</li> </ul>"},{"location":"release-notes/#411-2023-06-07","title":"4.1.1 (2023-06-07)","text":"<ul> <li>add <code>to_epsg()</code> and <code>to_wkt()</code> methods to <code>CRSType</code> to allow compatibility with <code>4.0</code></li> </ul> <pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\ntms.crs\n&gt;&gt; CRSType(__root__='http://www.opengis.net/def/crs/EPSG/0/3857')\n\ntms.crs.to_epsg()\n&gt;&gt; 3857\n\ntms._crs\n&gt;&gt; &lt;Projected CRS: EPSG:3857&gt;\n\ntms._crs.to_epsg()\n&gt;&gt; 3857\n</code></pre>"},{"location":"release-notes/#410-2023-06-06","title":"4.1.0 (2023-06-06)","text":"<ul> <li>Change CRS attribute in model to align more with the TMS spec and fix some OpenAPI schema issues (It should be a string URI or WKT, not a pyproj.CRS)</li> <li>add <code>TileMatrixSet._crs</code> PrivateAttr to host the <code>pyproj.CRS</code> version of the crs</li> <li>update <code>grid_crs</code> properties in <code>TileMatrixSet.feature()</code> result to return the <code>TileMatrixSet.CRS</code> (uri/wkt) instead of EPSG code</li> </ul>"},{"location":"release-notes/#402-2023-05-31","title":"4.0.2 (2023-05-31)","text":"<ul> <li>Fix TileMatrixSet BoundingBox definition (developmentseed/morecantile!122)</li> </ul>"},{"location":"release-notes/#401-2023-05-31","title":"4.0.1 (2023-05-31)","text":"<ul> <li>Raise a <code>ValueError</code> when <code>nan</code> bounds are passed to <code>tiles</code> (author @samn, developmentseed/morecantile!120)</li> </ul>"},{"location":"release-notes/#400-2023-05-22","title":"4.0.0 (2023-05-22)","text":"<ul> <li>no change since <code>4.0.0a1</code></li> </ul>"},{"location":"release-notes/#400a1-2023-05-17","title":"4.0.0a1 (2023-05-17)","text":"<ul> <li>Fix possible bug when a TileMatrixSet does not have <code>id</code></li> </ul>"},{"location":"release-notes/#400a0-2023-05-15","title":"4.0.0a0 (2023-05-15)","text":"<ul> <li>Remove assumption tile rows/cols are ordered in <code>TileMatrixSet.tiles()</code> method (author @fsvenson, developmentseed/morecantile!104)</li> <li>switch to TMS 2.0 specification (author @dchirst, developmentseed/morecantile!101). See developmentseed.org/morecantile/tms-v2/ for more info.</li> <li>remove <code>NZTM2000</code> TileMatrixSet (ref: developmentseed/morecantile#103)</li> <li>add <code>rasterio_geographic_crs</code> to export TMS's geographic CRS to Rasterio's CRS object (author @AndrewAnnex, developmentseed/morecantile!109)</li> <li>add <code>geographic_crs</code> property in the TileMatrixSet model to return the private <code>_geographic_crs</code> attribute</li> <li>add cache LRU layer on top of <code>TileMatrixSet.bbox</code> method</li> <li> <p>changed the input type in <code>morecantile.defaults.TileMatrixSets.register()</code> from <code>Sequence[TileMatrixSet]</code> to <code>Dict[str, TileMatrixSets]</code></p> <pre><code>my_custom_tms = ...\n\n# before\ndefaults = morecantile.tms.register([my_custom_tms])\n\n# now\ndefaults = morecantile.tms.register({\"MyCustomGrid\": my_custom_tms})\n</code></pre> </li> <li> <p>made <code>id</code> and <code>title</code> optional in <code>morecantile.TileMatrixSet.custom()</code> method</p> <pre><code>crs = CRS.from_epsg(3031)\nextent = [-948.75, -543592.47, 5817.41, -3333128.95]  # From https:///epsg.io/3031\n\n# before\ntms = morecantile.TileMatrixSet.custom(extent, crs)\nprint(tms.id, tms.title)\n&gt;&gt;&gt; \"Custom\", \"Custom TileMatrixSet\"\n\n# now\ntms = morecantile.TileMatrixSet.custom(extent, crs)\nprint(tms.id, tms.title)\n&gt;&gt;&gt; None, None\n</code></pre> </li> <li> <p>remove <code>boundingBox</code> in TileMatrixSet definition when created with <code>morecantile.TileMatrixSet.custom</code></p> </li> </ul>"},{"location":"release-notes/#340-2023-05-15","title":"3.4.0 (2023-05-15)","text":"<ul> <li>[backported from 4.0] Remove assumption tile rows/cols are ordered in <code>TileMatrixSet.tiles()</code> method (author @fsvenson, developmentseed/morecantile!104)</li> <li>[backported from 4.0] add <code>rasterio_geographic_crs</code> to export TMS's geographic CRS to Rasterio's CRS object (author @AndrewAnnex, developmentseed/morecantile!109)</li> <li>[backported from 4.0] add <code>geographic_crs</code> property in the TileMatrixSet model to return the private <code>_geographic_crs</code> attribute</li> <li>[backported from 4.0] add cache LRU layer on top of <code>TileMatrixSet.bbox</code> method</li> </ul>"},{"location":"release-notes/#330-2023-03-09","title":"3.3.0 (2023-03-09)","text":"<ul> <li>sort default TMS (author @jlaura, developmentseed/morecantile!98)</li> <li>Switch to ruff for linting and fixing linting issues</li> </ul>"},{"location":"release-notes/#325-2022-12-16","title":"3.2.5 (2022-12-16)","text":"<ul> <li>Do not parse TMS json files automatically but wait for the TMS to be used</li> </ul>"},{"location":"release-notes/#324-2022-12-14","title":"3.2.4 (2022-12-14)","text":"<ul> <li>fix <code>CanadianNAD83_LCC</code>, <code>WorldMercatorWGS84Quad</code> and <code>EuropeanETRS89_LAEAQuad</code> TMS</li> <li>add <code>title</code> option in <code>morecantile custom</code> CLI</li> </ul>"},{"location":"release-notes/#323-2022-12-13","title":"3.2.3 (2022-12-13)","text":"<ul> <li>fix <code>utils.meters_per_unit</code> for non earth bodies (author @AndrewAnnex, developmentseed/morecantile!92)</li> <li>fix <code>CRS_to_uri</code> function to adds ability to export non-EPSG CRSs URIs (author @AndrewAnnex, developmentseed/morecantile!93)</li> </ul>"},{"location":"release-notes/#322-2022-11-25","title":"3.2.2 (2022-11-25)","text":"<ul> <li>add <code>morecantile.defaults.TileMatrixSets</code> in export</li> </ul>"},{"location":"release-notes/#321-2022-10-25","title":"3.2.1 (2022-10-25)","text":"<ul> <li>add python 3.11 support</li> </ul>"},{"location":"release-notes/#320-2022-10-20","title":"3.2.0 (2022-10-20)","text":"<ul> <li>add python 3.10 support</li> <li>remove python 3.7 support</li> <li>switch to pyproject.toml</li> </ul>"},{"location":"release-notes/#312-2022-03-21","title":"3.1.2 (2022-03-21)","text":"<ul> <li>add support for <code>foot</code> and <code>US survey foot</code> CRS (developmentseed/morecantile!86)</li> </ul>"},{"location":"release-notes/#311-2022-02-25","title":"3.1.1 (2022-02-25)","text":"<ul> <li>fix issue with <code>zoom_for_res</code> when resolution is smaller than minzoom (author @samn, developmentseed/morecantile!84)</li> </ul>"},{"location":"release-notes/#310-2022-02-18","title":"3.1.0 (2022-02-18)","text":"<ul> <li>add <code>parent</code>, <code>children</code>, <code>neighbors</code>, <code>minmax</code>, <code>is_valid</code> methods (developmentseed/morecantile!82)</li> </ul> <p>breaking changes</p> <ul> <li>update <code>WebMercatorQuad</code> TMS to match <code>mercantile</code> and <code>GDAL</code> definition of the half-earth value</li> </ul>"},{"location":"release-notes/#305-2022-02-16","title":"3.0.5 (2022-02-16)","text":"<ul> <li>truncate geographic Lon/Lat inputs to the TMS geographic bbox instead of <code>-180., -90., 180., 90.</code> (developmentseed/morecantile!79)</li> <li>remove <code>utils.truncate_lnglat</code> function (developmentseed/morecantile!79)</li> </ul>"},{"location":"release-notes/#304-2022-02-16","title":"3.0.4 (2022-02-16)","text":"<ul> <li>Allow zoom_for_res to work for a TMS with a minzoom &gt; 0 (author @samn, developmentseed/morecantile!78)</li> </ul>"},{"location":"release-notes/#303-2021-12-06","title":"3.0.3 (2021-12-06)","text":"<ul> <li>add <code>WGS1984Quad</code> (<code>WGS84/epgs:4326</code>) TileMatrixSet (developmentseed/morecantile!74)</li> </ul>"},{"location":"release-notes/#302-2021-11-12","title":"3.0.2 (2021-11-12)","text":"<ul> <li>add <code>_geographic_crs</code> definition in <code>__init__</code> to make sure it's initialized from user input (author @davenquinn, developmentseed/morecantile!72)</li> </ul>"},{"location":"release-notes/#301-2021-11-10","title":"3.0.1 (2021-11-10)","text":"<ul> <li>rename <code>_to_wgs84</code> and <code>_from_wgs84</code> private attributes to <code>_to_geographic</code> and <code>_from_geographic</code> (developmentseed/morecantile!68)</li> <li>add <code>_geographic_crs</code> private attribute to <code>morecantile.TileMatrixSet</code> to define the CRS used in  <code>_to_geographic</code> and <code>_from_geographic</code> (developmentseed/morecantile!68)</li> <li>fix <code>TileMatrixSet._invert_axis</code> method to only check axis information (developmentseed/morecantile!71)</li> </ul>"},{"location":"release-notes/#300-2021-09-23","title":"3.0.0 (2021-09-23)","text":"<ul> <li>no change since 3.0.0a1</li> </ul>"},{"location":"release-notes/#300a1-2021-09-17","title":"3.0.0a1 (2021-09-17)","text":"<ul> <li>only import rasterio if needed (developmentseed/morecantile!66)</li> </ul>"},{"location":"release-notes/#300a0-2021-09-09","title":"3.0.0a0 (2021-09-09)","text":"<ul> <li>add <code>.rasterio_crs</code> properties to TMS for compatibility with rasterio (developmentseed/morecantile!58)</li> <li>Use new Class-like notation for namedtuple (developmentseed/morecantile!58)</li> </ul> <p>breaking changes</p> <ul> <li>switch from rasterio to PyProj for CRS definition and projection transformation (developmentseed/morecantile!58)</li> <li>remove python 3.6 supports (because of pyproj)</li> </ul>"},{"location":"release-notes/#214-2021-08-20","title":"2.1.4 (2021-08-20)","text":"<ul> <li>add NZTM2000Quad tile matrix set from LINZ (author @blacha, developmentseed/morecantile!57)</li> <li> <p>add quadkey supports (@author adrian-knauer, developmentseed/morecantile!56)</p> <pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\n# Tile to Quadkey\ntms.quadkey(486, 332, 10)\n&gt;&gt;&gt; \"0313102310\"\n\n# Quadkey to Tile\ntms.quadkey_to_tile(\"0313102310\")\n&gt;&gt;&gt; Tile(486, 332, 10)\n</code></pre> </li> <li> <p>update <code>NZTM2000*</code> CRS uri from <code>https://www.opengis.net/def/crs/EPSG/0/2193</code> to <code>urn:ogc:def:crs:EPSG:2193</code> (developmentseed/morecantile!61)</p> </li> </ul>"},{"location":"release-notes/#213-doesnt-exists","title":"2.1.3 - Doesn't exists","text":""},{"location":"release-notes/#212-2021-05-18","title":"2.1.2 (2021-05-18)","text":"<ul> <li>fix wrong TMS boundingBox definition when using inverted CRS (developmentseed/morecantile!53)</li> </ul>"},{"location":"release-notes/#211-2021-05-17","title":"2.1.1 (2021-05-17)","text":"<ul> <li>remove <code>mercantile</code> dependency.</li> <li>raise <code>PointOutsideTMSBounds</code> warning when user is doing operations outside TMS bounds.</li> <li>fix wrong <code>xy_bbox</code> when <code>tms.boundingBox</code> use a specific CRS.</li> </ul>"},{"location":"release-notes/#210-2020-12-17","title":"2.1.0 (2020-12-17)","text":"<ul> <li>add <code>zoom_level_strategy</code> option for <code>TileMatrixSet.zoom_for_res</code> to match GDAL 3.2. By default, it is set to <code>auto</code>, meaning that it will select the closest zoom level. User can set the strategy to <code>lower</code> or <code>upper</code> to select below or above zoom levels. <pre><code>import morecantile\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\n# native resolution of zoom 7 is 1222.9924 m\n# native resolution of zoom 8 is 611.4962 m\nassert tms.zoom_for_res(612.0) == 8\nassert tms.zoom_for_res(612.0, zoom_level_strategy=\"lower\") == 7\nassert tms.zoom_for_res(612.0, zoom_level_strategy=\"upper\") == 8\n</code></pre></li> </ul>"},{"location":"release-notes/#201-2020-11-05","title":"2.0.1 (2020-11-05)","text":"<ul> <li>simplify <code>morecantile.TileMatrixSet</code> default representation</li> </ul> <pre><code>from morecantile import tms\n\ntms.get(\"WorldCRS84Quad\")\n&gt;&gt;&gt; &lt;TileMatrixSet title='CRS84 for the World' identifier='WorldCRS84Quad'&gt;\n\nprint(tms.get(\"WorldCRS84Quad\").json())\n&gt;&gt;&gt; {\n    'type': 'TileMatrixSetType',\n    'title': 'CRS84 for the World',\n    'abstract': None,\n    'keywords': None,\n    'identifier': 'WorldCRS84Quad',\n    'supportedCRS': CRS.from_epsg(4326),\n    'wellKnownScaleSet': AnyHttpUrl(...),\n    'boundingBox': {\n        'type': 'BoundingBoxType',\n        'crs': CRS.from_epsg(4326),\n        'lowerCorner': (-180.0, -90.0),\n        'upperCorner': (180.0, 90.0)},\n        'tileMatrix': [...]\n    }\n</code></pre>"},{"location":"release-notes/#200-2020-11-04","title":"2.0.0 (2020-11-04)","text":"<ul> <li>switch from <code>CoordBBox</code> to <code>rasterio.coords.BoundingBox</code> (ref: developmentseed/morecantile#38).</li> <li>update <code>morecantile.commons</code> Tile and Coords to match rasterio's BoundingBox.</li> <li>rename <code>morecantile.models.BoundingBox</code> to <code>morecantile.models.TMSBoundingBox</code> to avoind name colision with rasterio's BoundingBox.</li> <li>improve default TMS immutability by making <code>morecantile.tms.register</code> to return a new TileMatrixSets instance (ref: developmentseed/morecantile#37)</li> </ul> <pre><code>import morecantile import TileMatrixSet, tms\nfrom rasterio.crs import CRS\n\ncrs = CRS.from_epsg(3031)\nextent = [-948.75, -543592.47, 5817.41, -3333128.95]  # From https:///epsg.io/3031\ncustom_tms = TileMatrixSet.custom(extent, crs, identifier=\"MyCustomTmsEPSG3031\")\n\nprint(len(tms.list()))\n&gt;&gt;&gt; 10\n\ndefaults = tms.register(custom_tms)\nprint(len(tms.list()))\n&gt;&gt;&gt; 10\n\nprint(len(defaults.list()))\n&gt;&gt;&gt; 11\n</code></pre>"},{"location":"release-notes/#131-2020-10-07","title":"1.3.1 (2020-10-07)","text":"<ul> <li>remove <code>pkg_resources</code> (pypa/setuptools#510, developmentseed/morecantile!36)</li> <li>add <code>TILEMATRIXSET_DIRECTORY</code> to allow morecantile to load user's TMS</li> </ul> <pre><code># Save custom TMS to a file\nimport morecantile\nfrom rasterio.crs import CRS\n\ncrs = CRS.from_epsg(3031)\nextent = [-948.75, -543592.47, 5817.41, -3333128.95]  # From https:///epsg.io/3031\ntms = morecantile.TileMatrixSet.custom(extent, crs, identifier=\"MyCustomTmsEPSG3031\")\n\nwith open(\"/tmp/mytms/MyCustomTmsEPSG3031.json\", \"w\") as f:\n    f.write(tms.json(exclude_none=True))\n</code></pre> <pre><code>import os\nos.environ[\"TILEMATRIXSET_DIRECTORY\"] = \"/tmp/mytms\"\n\nfrom morecantile import tms\nassert \"MyCustomTmsEPSG3031\" in tms.list()\n</code></pre>"},{"location":"release-notes/#130post1-2020-09-30","title":"1.3.0.post1 (2020-09-30)","text":"<ul> <li>fix TileMatrixSet's model schema bug where pydantic wasn't able to translate <code>Union[rasterio.crs.CRS, pydantic.AnyHttpUrl]</code> to a valid schema (ref: developmentseed/morecantile#34)</li> </ul>"},{"location":"release-notes/#130-2020-09-30","title":"1.3.0 (2020-09-30)","text":"<ul> <li>Allow Custom CRS for custom TMS definition (developmentseed/morecantile#23)</li> <li>Extend TMS beyond TMS Document max zoom level (developmentseed/morecantile!28)</li> <li>Require rasterio &gt;= 1.1.7 (sept 2020) to support inverted lat/lon TMS (ref: developmentseed/morecantile#26)</li> <li>Remove deprecated function</li> <li>Add <code>tms.xy_bbox</code> and <code>tms.bbox</code> properties to return TileMatrixSet boundaries.</li> <li>Add <code>tms.intersect_tms</code> to check if a bbox intersect with the TileMatrixSet boundaries.</li> <li>Avoid out-range tiles (e.g. negative indexes)</li> <li>Add <code>tms.zoom_for_res</code> function to get the TMS zoom level for a specific resolution (developmentseed/morecantile#31).</li> </ul>"},{"location":"release-notes/#120-2020-06-01","title":"1.2.0 (2020-06-01)","text":"<ul> <li>add TileMatrixSet minzoom/maxzoom properties</li> <li>fix TileMatrixSet.tile calculation</li> <li>add TileMatrixSet.tiles function (replicat from mercantile)</li> <li>add buffer and projected options to TileMatrixSet.feature method</li> <li>removes mercantile as dependencies</li> <li>add CLI</li> <li>renamed <code>morecantile.TileMatrixSet.point_towgs84</code> to <code>morecantile.TileMatrixSet.lnglat</code> (matches mercantile)</li> <li>renamed <code>morecantile.TileMatrixSet.point_fromwgs84</code> to <code>morecantile.TileMatrixSet.xy</code> (matches mercantile)</li> <li>add <code>truncate</code> option in <code>morecantile.TileMatrixSet.tile</code> (matches mercantile)</li> <li>re-order buffer and precision options in <code>morecantile.TileMatrixSet.feature</code> (matches mercantile)</li> <li>uses mercantile's tests</li> </ul>"},{"location":"release-notes/#111-2020-05-15","title":"1.1.1 (2020-05-15)","text":"<ul> <li>Fix bad default TMS files (developmentseed/morecantile#13)</li> <li>Add regex in model for identifier validation</li> </ul>"},{"location":"release-notes/#110-2020-05-13","title":"1.1.0 (2020-05-13)","text":"<ul> <li>better submodule definition</li> <li>add <code>morecantile.tms</code> object to access and register defaults TileMatrixSet</li> <li>Add depreciation warning for <code>morecantile.TileMatrixSet.load</code> method</li> </ul>"},{"location":"release-notes/#100-2020-05-11","title":"1.0.0 (2020-05-11)","text":"<p>Major refactor of Morecantile, which is now based on OGC TileMatrixSet JSON documents.</p> <ul> <li>use pydantic model to validate TMS JSON documents (developmentseed/morecantile!6, author @geospatial-jeff)</li> <li>morecantile methods are part of the TMS model (developmentseed/morecantile!7)</li> </ul>"},{"location":"release-notes/#010-2020-02-03","title":"0.1.0 (2020-02-03)","text":"<ul> <li>Rename defaults grids (developmentseed/morecantile#1)</li> </ul>"},{"location":"release-notes/#001-2020-01-23","title":"0.0.1 (2020-01-23)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"tms-v2/","title":"TMS v2.0 and Morecantile v4","text":"<p>In September 2022, the Open Geospatial Consortium released an updated specification for Tile Matrix Sets - version 2.0.</p> <p>This updated spec includes some breaking changes that alter the TMS JSON document. Some of these changes include:</p> <ul> <li>Addition of a <code>uri</code> parameter for TileMatrixSets registered on the official OGC NA TileMatrixSets registry</li> <li><code>identifier</code> renamed to <code>id</code> in both TileMatrix and TileMatrixSet</li> <li>Only <code>crs</code> and <code>tileMatrices</code> are required in <code>TileMatrixSet</code></li> <li><code>supportedCRS</code> renamed to <code>crs</code></li> <li><code>tileMatrix</code> renamed to <code>tileMatrices</code></li> <li><code>topLeftCorner</code> renamed to <code>pointOfOrigin</code></li> <li>Add <code>cellSize</code> and <code>cornerOfOrigin</code> (Optional) parameters to TileMatrix</li> <li>Remove <code>type</code> object properties</li> <li>Added optional axis ordering</li> </ul> <p>Morecantile version 4 has been updated to support the updated TMS 2.0 specification. When using the predefined Tile Matrix Sets or making a custom TMS this should work as normal with some renamed properties (specified above).</p> <p>If you want to create a new Tile Matrix Set from a JSON made to the old TMS v1 specification, there is a new class method called <code>from_v1</code> that does this.</p> <pre><code>from morecantile.models import TileMatrixSet\nimport json\n\nwith open(\"tms_v1.json\") as f:\n    data = json.load(f)\n\n\nTileMatrixSet.from_v1(data)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#load-one-tms-grid","title":"Load one TMS grid","text":"<pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\ntms\n&gt;&gt;&gt; &lt;TileMatrixSet title='Google Maps Compatible for the World' id='WebMercatorQuad' crs='http://www.opengis.net/def/crs/EPSG/0/3857&gt;\n</code></pre>"},{"location":"usage/#create-tile-and-get-bounds","title":"Create tile and get bounds","text":"<pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\n# Get the bounds for tile Z=4, X=10, Y=10 in the input projection\ntms.xy_bounds(morecantile.Tile(10, 10, 4))\n&gt;&gt;&gt; BoundingBox(left=5009377.085697308, bottom=-7514065.628545959, right=7514065.628545959, top=-5009377.085697308)\n\n# Get the bounds for tile Z=4, X=10, Y=10 in LatLon (WGS84)\ntms.bounds(morecantile.Tile(10, 10, 4))\n&gt;&gt;&gt; BoundingBox(left=44.999999999999964, bottom=-55.776573018667634, right=67.4999999999999, top=-40.97989806962009)\n</code></pre>"},{"location":"usage/#find-tile-for-latlon","title":"Find tile for lat/lon","text":"<pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\ntms.tile(159.31, -42, 4)\n&gt;&gt;&gt; Tile(x=15, y=10, z=4)\n\n# Or using coordinates in input CRS\nx, y = tms.xy(159.31, -42)\nprint(x, y)\n&gt;&gt;&gt; (17734308.078276414, -5160979.444049781)\n\ntms._tile(x, y, 4)\n&gt;&gt;&gt; Tile(x=15, y=10, z=4)\n</code></pre>"},{"location":"usage/#get-geojson-feature","title":"Get Geojson Feature","text":"<pre><code>import morecantile\n\ntms = morecantile.tms.get(\"WebMercatorQuad\")\n\ntms.feature(morecantile.Tile(10, 10, 4))\n\n&gt;&gt;&gt; {\n    'type': 'Feature',\n    'bbox': [\n        44.999999999999964,\n        -55.776573018667634,\n        67.4999999999999,\n        -40.97989806962009\n    ],\n    'id': 'Tile(x=10, y=10, z=4)',\n    'geometry': {\n        'type': 'Polygon',\n        'coordinates': [[\n            [44.999999999999964, -55.776573018667634],\n            [44.999999999999964, -40.97989806962009],\n            [67.4999999999999, -40.97989806962009],\n            [67.4999999999999, -55.776573018667634],\n            [44.999999999999964, -55.776573018667634]\n        ]]\n    },\n    'properties': {\n        'title': 'XYZ tile Tile(x=10, y=10, z=4)',\n        'grid_name': 'WebMercatorQuad',\n        'grid_crs': 'EPSG:3857'\n    }\n}\n</code></pre>"},{"location":"usage/#define-custom-grid","title":"Define custom grid","text":"<p>You can create custom TMS grid using <code>morecantile.TileMatrixSet.custom</code> method.</p> <p>Here are the available options:</p> <ul> <li> <p>extent (list of float, REQUIRED]: a list of coordinates in form of <code>[xmin, ymin, xmax, ymax]</code> describing the extend of the TMS</p> </li> <li> <p>crs (pyproj.CRS, REQUIRED): Coordinate reference system of the grid</p> </li> <li> <p>tile_width (int, defaults to <code>256</code>): Width of each tile of this tile matrix in pixels (variable width is not supported)</p> </li> <li> <p>tile_height (int, defaults to <code>256</code>): Height of each tile of this tile matrix in pixels (variable height is not supported)</p> </li> <li> <p>matrix_scale (list of int, default to <code>[1, 1]</code>): Tiling schema coalescence coefficient (see docs.opengeospatial.org/is/17-083r2/17-083r2.html#14)</p> </li> <li> <p>extent_crs (pyproj.CRS, defaults to TMS CRS): <code>extent</code>'s coordinate reference system</p> </li> <li> <p>minzoom (int, defaults to <code>0</code>): Tile Matrix Set minimum zoom level</p> </li> <li> <p>maxzoom (int, defaults to <code>24</code>): Tile Matrix Set maximum zoom level</p> </li> <li> <p>title (str, defaults to <code>Custom TileMatrixSet</code>): Tile Matrix Set title</p> </li> <li> <p>id (str, defaults to <code>Custom</code>): Tile Matrix Set identifier</p> </li> <li> <p>ordered_axes (list of str, Optional): Override Axis order (e.g <code>[\"N\", \"S\"]</code>) else default to CRS's metadata</p> </li> <li> <p>screen_pixel_size (float, optional): Rendering pixel size. <code>0.28</code> mm was the actual pixel size of a common display from 2005 and considered as standard by OGC.</p> </li> <li> <p>decimation_base (int, optional): How tiles are divided at each zoom level (default is 2). Must be greater than 1.</p> </li> </ul> <pre><code>import morecantile\nfrom pyproj import CRS\n\ncrs = CRS.from_epsg(3031)\nextent = [-948.75, -543592.47, 5817.41, -3333128.95]  # From https:///epsg.io/3031\ncustomEPGS3031 = morecantile.TileMatrixSet.custom(extent, crs, id=\"MyCustomTmsEPSG3031\")\n\nprint(customEPGS3031.matrix(0).dict(exclude_none=True))\n&gt;&gt;&gt; {\n    \"type\": \"TileMatrixType\",\n    \"id\": \"0\",\n    \"scaleDenominator\": 38916524.55357144,\n    \"pointOfOrigin\": [\n        -948.75,\n        -3333128.95\n    ],\n    \"tileWidth\": 256,\n    \"tileHeight\": 256,\n    \"matrixWidth\": 1,\n    \"matrixHeight\": 1\n}\n</code></pre>"},{"location":"usage/#use-morecantile-tms-store","title":"Use morecantile TMS store","text":"<p>morecantile provides a <code>TileMatrixSets</code> class to store Tile Matrix Set definition. This object can easily be extended to include your own custom TMS.</p>"},{"location":"usage/#list-supported-grids","title":"List supported grids","text":"<pre><code>import morecantile\n\nprint(morecantile.tms.list())\n&gt;&gt;&gt; [\n    'LINZAntarticaMapTilegrid',\n    'EuropeanETRS89_LAEAQuad',\n    'CanadianNAD83_LCC',\n    'UPSArcticWGS84Quad',\n    'NZTM2000Quad',\n    'UTM31WGS84Quad',\n    'UPSAntarcticWGS84Quad',\n    'WorldMercatorWGS84Quad',\n    'WorldCRS84Quad',\n    'WGS1984Quad',\n    'WebMercatorQuad'\n]\n</code></pre>"},{"location":"usage/#register-a-custom-tms","title":"Register a custom TMS","text":"<pre><code>default_tms = morecantile.tms.register({\"MyCustomTmsEPSG3031\": customEPGS3031})\nassert \"MyCustomTmsEPSG3031\" in default_tms.list()\n\ntms = default_tms.get(\"MyCustomTmsEPSG3031\")\ntms\n&gt;&gt;&gt; &lt;TileMatrixSet title='None' id='MyCustomTmsEPSG3031' crs='epsg:3031&gt;\n</code></pre>"},{"location":"usage/#automatically-register-tms-documents","title":"Automatically register TMS documents","text":"<p>Since the release of morecantile <code>1.3.1</code>, users can automatically extend morecantile's default TMS with their custom TMS JSON files stored in a directory, by setting <code>TILEMATRIXSET_DIRECTORY</code> environment.</p> <p>Important</p> <p>Morecantile will look for all <code>.json</code> files within the directory referenced by <code>TILEMATRIXSET_DIRECTORY</code>.</p> <ul> <li>filename HAVE TO be the same as the TMS id</li> <li>filename HAVE TO be without special characters <code>[a-zA-Z0-9_]</code></li> </ul>"},{"location":"usage/#morecantile-pydantic","title":"Morecantile + Pydantic","text":"<p>Morecantile uses Pydantic to define and validate TileMatrixSet documents.</p> <p>From Pydantic docs:</p> <p>Define how data should be in pure, canonical python; validate it with pydantic.</p> <p>Pydantic model enforce the TileMatrixSet OGC specification for the whole project by validating each items.</p> <p>Because we use pydantic model to handle the TileMatrixSets you can uses pydantic's methods directly.</p> <pre><code>import morecantile\n\nmy_tms_doc = \"~/a_tms_doc.json\"\n\ntms = morecantile.TileMatrixSet.parse_file(my_tms_doc)\n\n# print the TMS as json\nprint(tms.model_dump_json(exclude_none=True))\n\n# print the TMS as dict\nprint(tms.model_dump(exclude_none=True))\n</code></pre>"},{"location":"advanced/geographic/","title":"Geographic Transformations","text":"<p>Several methods/properties of the morecantile.TileMatrixSet object use Geographic Coordinates Reference System (CRS) to transform coordinates from/to the TMS's CRS:</p> <ul> <li><code>TileMatrixSet.lnglat(x, y)</code>: Transform point(x,y) to geographic longitude and latitude</li> <li><code>TileMatrixSet.xy(lng, lat)</code>: Transform geographic longitude and latitude coordinates to TMS CRS</li> <li><code>TileMatrixSet.ul(Tile)</code>: Return the upper left coordinates of the tile in geographic coordinate reference system</li> <li><code>TileMatrixSet.lr(Tile)</code>: Return the lower right coordinates of the tile in geographic coordinate reference system</li> <li><code>TileMatrixSet.bounds(Tile)</code>: Return the bounding box of the tile in geographic coordinate reference system</li> <li><code>TileMatrixSet.bbox</code>: Return TMS bounding box in geographic coordinate reference system</li> </ul> <p>For those methods/properties, the Geographic CRS is defined by the TileMatrixSet CRS's geographic CRS (<code>CRS.geodetic_crs</code>). The most common one is the <code>World Geodetic System 1984</code> (<code>WGS84</code> or <code>EPSG:4326</code>) but it's not the one used by default.</p> <pre><code>import morecantile \n\nmorecantile.tms.get(\"WebMercatorQuad\").geographic_crs\n&gt;&gt; &lt;Geographic 2D CRS: EPSG:4326&gt;\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\nmorecantile.tms.get(\"CanadianNAD83_LCC\").geographic_crs\n&gt;&gt; &lt;Geographic 2D CRS: EPSG:4269&gt;\nName: NAD83\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n- bounds: (167.65, 14.92, -40.73, 86.45)\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n</code></pre>"},{"location":"advanced/geographic/#overwriting-the-geographic-crs","title":"Overwriting the Geographic CRS","text":"<p>There are two mechanisms to overwrite the TMS's geographic CRS.</p> <ul> <li><code>TileMatrixSet.set_geographic_crs(crs)</code>: Overwrite the TMS's Geographic CRS (<code>TileMatrixSet._geographic_crs</code> private attribute)</li> </ul> <pre><code>import morecantile\nimport pyproj\n\ntms = morecantile.tms.get(\"CanadianNAD83_LCC\")\ntms.geographic_crs\n&gt;&gt; &lt;Geographic 2D CRS: EPSG:4269&gt;\n...\n\ntms.set_geographic_crs(pyproj.CRS.from_epsg(4326))\ntms.geographic_crs\n&gt;&gt; &lt;Geographic 2D CRS: EPSG:4326&gt;\n...\n</code></pre> <ul> <li><code>MORECANTILE_DEFAULT_GEOGRAPHIC_CRS</code> environment variable</li> </ul> <pre><code>import os\nos.environ[\"MORECANTILE_DEFAULT_GEOGRAPHIC_CRS\"] = \"EPSG:4326\"\n\nimport morecantile\n\ntms = morecantile.tms.get(\"CanadianNAD83_LCC\")\ntms.geographic_crs\n&gt;&gt; &lt;Geographic 2D CRS: EPSG:4326&gt;\n</code></pre> <p>Some methods have <code>geographic_crs</code> option to specify the CRS to use to transf the default CRS:</p> <ul> <li><code>TileMatrixSet.tile(lng, lat, *, geographic_crs=None)</code>: Get the tile for a given geographic longitude and latitude pair</li> <li><code>TileMatrixSet.tiles(west, south, east, north, *, geographic_crs=None)</code>: Get the tiles overlapped by a geographic bounding box</li> </ul>"},{"location":"api/morecantile/commons/","title":"morecantile.commons","text":""},{"location":"api/morecantile/commons/#morecantile.commons","title":"morecantile.commons","text":"<p>Morecantile commons.</p>"},{"location":"api/morecantile/commons/#morecantile.commons.BoundingBox","title":"BoundingBox","text":"<p>               Bases: <code>NamedTuple</code></p> <p>A xmin,ymin,xmax,ymax coordinates tuple.</p> <p>Parameters:</p> <ul> <li> <code>left</code>               (<code>number</code>)           \u2013            <p>min horizontal coordinate.</p> </li> <li> <code>bottom</code>               (<code>number</code>)           \u2013            <p>min vertical coordinate.</p> </li> <li> <code>right</code>               (<code>number</code>)           \u2013            <p>max horizontal coordinate.</p> </li> <li> <code>top</code>               (<code>number</code>)           \u2013            <p>max vertical coordinate.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; BoundingBox(-180.0, -90.0, 180.0, 90.0)\n</code></pre>"},{"location":"api/morecantile/commons/#morecantile.commons.Coords","title":"Coords","text":"<p>               Bases: <code>NamedTuple</code></p> <p>A x,y Coordinates pair.</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>number</code>)           \u2013            <p>horizontal coordinate input projection unit.</p> </li> <li> <code>y</code>               (<code>number</code>)           \u2013            <p>vertical coordinate input projection unit.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Coords(-90.3, 10.5)\n</code></pre>"},{"location":"api/morecantile/commons/#morecantile.commons.Tile","title":"Tile","text":"<p>               Bases: <code>NamedTuple</code></p> <p>TileMatrixSet X,Y,Z tile indices.</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>int</code>)           \u2013            <p>horizontal index.</p> </li> <li> <code>y</code>               (<code>int</code>)           \u2013            <p>verctical index.</p> </li> <li> <code>z</code>               (<code>int</code>)           \u2013            <p>zoom level.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Tile(0, 0, 0)\n</code></pre>"},{"location":"api/morecantile/defaults/","title":"morecantile.defaults","text":""},{"location":"api/morecantile/defaults/#morecantile.defaults","title":"morecantile.defaults","text":"<p>Default Morecantile TMS.</p>"},{"location":"api/morecantile/defaults/#morecantile.defaults.TileMatrixSets","title":"TileMatrixSets","text":"<p>Default TileMatrixSets holder.</p>"},{"location":"api/morecantile/defaults/#morecantile.defaults.TileMatrixSets.get","title":"get","text":"<pre><code>get(identifier: str) -&gt; TileMatrixSet\n</code></pre> <p>Fetch a TMS.</p>"},{"location":"api/morecantile/defaults/#morecantile.defaults.TileMatrixSets.list","title":"list","text":"<pre><code>list() -&gt; List[str]\n</code></pre> <p>List registered TMS.</p>"},{"location":"api/morecantile/defaults/#morecantile.defaults.TileMatrixSets.register","title":"register","text":"<pre><code>register(custom_tms: Dict[str, TileMatrixSet], overwrite: bool = False) -&gt; TileMatrixSets\n</code></pre> <p>Register TileMatrixSet(s).</p>"},{"location":"api/morecantile/errors/","title":"morecantile.errors","text":""},{"location":"api/morecantile/errors/#morecantile.errors","title":"morecantile.errors","text":"<p>Morecantile errors.</p>"},{"location":"api/morecantile/errors/#morecantile.errors.DeprecationError","title":"DeprecationError","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when TMS version is not 2.0</p>"},{"location":"api/morecantile/errors/#morecantile.errors.InvalidIdentifier","title":"InvalidIdentifier","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Invalid TileMatrixSet indentifier.</p>"},{"location":"api/morecantile/errors/#morecantile.errors.InvalidLatitudeError","title":"InvalidLatitudeError","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when math errors occur beyond ~85 degrees N or S</p>"},{"location":"api/morecantile/errors/#morecantile.errors.InvalidZoomError","title":"InvalidZoomError","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when input zoom is invalid.</p>"},{"location":"api/morecantile/errors/#morecantile.errors.MorecantileError","title":"MorecantileError","text":"<p>               Bases: <code>Exception</code></p> <p>Base error for Morecantile.</p>"},{"location":"api/morecantile/errors/#morecantile.errors.NoQuadkeySupport","title":"NoQuadkeySupport","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when a custom TileMatrixSet doesn't support quadkeys</p>"},{"location":"api/morecantile/errors/#morecantile.errors.PointOutsideTMSBounds","title":"PointOutsideTMSBounds","text":"<p>               Bases: <code>UserWarning</code></p> <p>Point is outside TMS bounds.</p>"},{"location":"api/morecantile/errors/#morecantile.errors.QuadKeyError","title":"QuadKeyError","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when errors occur in computing or parsing quad keys</p>"},{"location":"api/morecantile/errors/#morecantile.errors.TileArgParsingError","title":"TileArgParsingError","text":"<p>               Bases: <code>MorecantileError</code></p> <p>Raised when errors occur in parsing a function's tile arg(s)</p>"},{"location":"api/morecantile/models/","title":"morecantile.models","text":""},{"location":"api/morecantile/models/#morecantile.models","title":"morecantile.models","text":"<p>Pydantic modules for OGC TileMatrixSets (www.ogc.org/standards/tms)</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS","title":"CRS","text":"<p>               Bases: <code>RootModel[Union[str, Union[CRSUri, CRSWKT, CRSRef]]]</code></p> <p>CRS model.</p> <p>Ref: github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-geodata/crs.yaml</p> <p>Code generated using koxudaxi/datamodel-code-generator</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.srs","title":"srs  <code>property</code>","text":"<pre><code>srs: str\n</code></pre> <p>return the string form of the user input used to create the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.model_post_init","title":"model_post_init","text":"<pre><code>model_post_init(__context: Any) -&gt; None\n</code></pre> <p>Post Init: Set private attr.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict\n</code></pre> <p>return DICT version of the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.to_epsg","title":"to_epsg","text":"<pre><code>to_epsg(*args: Any, **kwargs: Any) -&gt; Optional[int]\n</code></pre> <p>return EPSG number of the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.to_json","title":"to_json","text":"<pre><code>to_json(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>return JSON version of the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.to_proj4","title":"to_proj4","text":"<pre><code>to_proj4(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>return PROJ4 version of the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS.to_wkt","title":"to_wkt","text":"<pre><code>to_wkt(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>return WKT version of the CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRSRef","title":"CRSRef","text":"<p>               Bases: <code>BaseModel</code></p> <p>CRS from referenceSystem.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRSUri","title":"CRSUri","text":"<p>               Bases: <code>BaseModel</code></p> <p>Coordinate Reference System (CRS) from URI.</p>"},{"location":"api/morecantile/models/#morecantile.models.CRSWKT","title":"CRSWKT","text":"<p>               Bases: <code>BaseModel</code></p> <p>Coordinate Reference System (CRS) from WKT encoded as PROJJSON Object.</p>"},{"location":"api/morecantile/models/#morecantile.models.TMSBoundingBox","title":"TMSBoundingBox","text":"<p>               Bases: <code>BaseModel</code></p> <p>Bounding box</p> <p>ref: github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/2DBoundingBox.json</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrix","title":"TileMatrix","text":"<p>               Bases: <code>BaseModel</code></p> <p>Tile Matrix Definition</p> <p>A tile matrix, usually corresponding to a particular zoom level of a TileMatrixSet.</p> <p>ref: github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrix.json</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrix.get_coalesce_factor","title":"get_coalesce_factor","text":"<pre><code>get_coalesce_factor(row: int) -&gt; int\n</code></pre> <p>Get Coalesce value for TileMatrix.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet","title":"TileMatrixSet","text":"<p>               Bases: <code>BaseModel</code></p> <p>Tile Matrix Set Definition</p> <p>A definition of a tile matrix set following the Tile Matrix Set standard. For tileset metadata, such a description (in <code>tileMatrixSet</code> property) is only required for offline use, as an alternative to a link with a <code>http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme</code> relation type.</p> <p>ref: github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrixSet.json</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._invert_axis","title":"_invert_axis  <code>cached</code> <code>property</code>","text":"<pre><code>_invert_axis: bool\n</code></pre> <p>Check if CRS has inverted AXIS (lat,lon) instead of (lon,lat).</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.bbox","title":"bbox  <code>property</code>","text":"<pre><code>bbox\n</code></pre> <p>Return TMS bounding box in geographic coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.geographic_crs","title":"geographic_crs  <code>property</code>","text":"<pre><code>geographic_crs: CRS\n</code></pre> <p>Return the TMS's geographic CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.is_quadtree","title":"is_quadtree  <code>cached</code> <code>property</code>","text":"<pre><code>is_quadtree: bool\n</code></pre> <p>Check for quadtree support.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.is_variable","title":"is_variable  <code>cached</code> <code>property</code>","text":"<pre><code>is_variable: bool\n</code></pre> <p>Check if TMS has variable width matrix.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.maxzoom","title":"maxzoom  <code>property</code>","text":"<pre><code>maxzoom: int\n</code></pre> <p>TileMatrixSet maximum TileMatrix identifier</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.minzoom","title":"minzoom  <code>property</code>","text":"<pre><code>minzoom: int\n</code></pre> <p>TileMatrixSet minimum TileMatrix identifier</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.rasterio_crs","title":"rasterio_crs  <code>cached</code> <code>property</code>","text":"<pre><code>rasterio_crs\n</code></pre> <p>Return rasterio CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.rasterio_geographic_crs","title":"rasterio_geographic_crs  <code>property</code>","text":"<pre><code>rasterio_geographic_crs\n</code></pre> <p>Return the geographic CRS as a rasterio CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.xy_bbox","title":"xy_bbox  <code>cached</code> <code>property</code>","text":"<pre><code>xy_bbox\n</code></pre> <p>Return TMS bounding box in TileMatrixSet's CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.__init__","title":"__init__","text":"<pre><code>__init__(**data)\n</code></pre> <p>Set private attributes.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre> <p>Iterate over matrices</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre> <p>Simplify default pydantic model repr.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._lr","title":"_lr","text":"<pre><code>_lr(*tile: Tile) -&gt; Coords\n</code></pre> <p>Return the lower right coordinate of the tile in TMS coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._lr--attributes","title":"Attributes","text":"<p>tile: (x, y, z) tile coordinates or a Tile object we want the lower right coordinates of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._lr--returns","title":"Returns","text":"<p>Coords: The lower right coordinates of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._matrix_origin","title":"_matrix_origin","text":"<pre><code>_matrix_origin(matrix: TileMatrix) -&gt; Coords\n</code></pre> <p>Return the Origin coordinates of the matrix.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._tile","title":"_tile","text":"<pre><code>_tile(xcoord: float, ycoord: float, zoom: int, ignore_coalescence: bool = True) -&gt; Tile\n</code></pre> <p>Get the tile containing a Point (in TMS CRS).</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._tile--parameters","title":"Parameters","text":"<p>xcoord, ycoord : float     A <code>X</code> and <code>Y</code> pair in TMS coordinate reference system. zoom : int     The zoom level.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._tile--returns","title":"Returns","text":"<p>Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._ul","title":"_ul","text":"<pre><code>_ul(*tile: Tile) -&gt; Coords\n</code></pre> <p>Return the upper left coordinate of the tile in TMS coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._ul--attributes","title":"Attributes","text":"<p>tile: (x, y, z) tile coordinates or a Tile object we want the upper left coordinates of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet._ul--returns","title":"Returns","text":"<p>Coords: The upper left coordinates of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.bounds","title":"bounds","text":"<pre><code>bounds(*tile: Tile) -&gt; BoundingBox\n</code></pre> <p>Return the bounding box of the tile in geographic coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.bounds--attributes","title":"Attributes","text":"<p>tile (tuple or Tile): A tuple of (x, y, z) tile coordinates or a Tile object we want the bounding box of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.bounds--returns","title":"Returns","text":"<p>BoundingBox: The bounding box of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.check_for_old_specification","title":"check_for_old_specification","text":"<pre><code>check_for_old_specification(data)\n</code></pre> <p>Check for TMS V1.0 keywords.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.children","title":"children","text":"<pre><code>children(*tile: Tile, zoom: int = None)\n</code></pre> <p>Get the children of a tile</p> <p>The children are ordered: top-left, top-right, bottom-right, bottom-left.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.children--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z. zoom : int, optional     Determines the zoom level of the returned child tiles.     This defaults to one higher than the tile (the immediate children).</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.children--returns","title":"Returns","text":"<p>list: list of Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.custom","title":"custom  <code>classmethod</code>","text":"<pre><code>custom(extent: List[float], crs: CRS, tile_width: int = 256, tile_height: int = 256, matrix_scale: Optional[List] = None, extent_crs: Optional[CRS] = None, minzoom: int = 0, maxzoom: int = 24, title: Optional[str] = None, id: Optional[str] = None, ordered_axes: Optional[List[str]] = None, screen_pixel_size: float = 0.00028, decimation_base: int = 2, **kwargs: Any)\n</code></pre> <p>Construct a custom TileMatrixSet.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.custom--attributes","title":"Attributes","text":"<p>crs: pyproj.CRS     Tile Matrix Set coordinate reference system extent: list     Bounding box of the Tile Matrix Set, (left, bottom, right, top). tile_width: int     Width of each tile of this tile matrix in pixels (default is 256). tile_height: int     Height of each tile of this tile matrix in pixels (default is 256). matrix_scale: list     Tiling schema coalescence coefficient (default: [1, 1] for EPSG:3857).     Should be set to [2, 1] for EPSG:4326.     see: docs.opengeospatial.org/is/17-083r2/17-083r2.html#14 extent_crs: pyproj.CRS     Extent's coordinate reference system, as a pyproj CRS object.     (default: same as input crs) minzoom: int     Tile Matrix Set minimum zoom level (default is 0). maxzoom: int     Tile Matrix Set maximum zoom level (default is 24). title: str, optional     Tile Matrix Set title id: str, optional     Tile Matrix Set identifier ordered_axes: list of str, optional     Override Axis order (e.g <code>[\"N\", \"S\"]</code>) else default to CRS's metadata screen_pixel_size: float, optional     Rendering pixel size. 0.28 mm was the actual pixel size of a common display from 2005 and considered as standard by OGC. decimation_base: int, optional     How tiles are divided at each zoom level (default is 2). Must be greater than 1. kwargs: Any     Attributes to forward to the TileMatrixSet</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.custom--returns","title":"Returns:","text":"<p>TileMatrixSet</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.feature","title":"feature","text":"<pre><code>feature(tile: Tile, fid: Optional[str] = None, props: Optional[Dict] = None, buffer: Optional[NumType] = None, precision: Optional[int] = None, projected: bool = False, geographic_crs: Optional[CRS] = None) -&gt; Dict\n</code></pre> <p>Get the GeoJSON feature corresponding to a tile.</p> <p>Originally from github.com/mapbox/mercantile/blob/master/mercantile/__init__.py</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.feature--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z. fid : str, optional     A feature id. props : dict, optional     Optional extra feature properties. buffer : float, optional     Optional buffer distance for the GeoJSON polygon. precision: float     If &gt;= 0, geometry coordinates will be rounded to this number of decimal,     otherwise original coordinate values will be preserved (default). projected : bool, optional     Return coordinates in TMS projection. Default is false. geographic_crs: pyproj.CRS, optional     Geographic CRS to use when <code>projected=False</code>. Default to 'EPSG:4326' as per GeoJSON specification.     .</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.feature--returns","title":"Returns","text":"<p>dict</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.from_v1","title":"from_v1  <code>classmethod</code>","text":"<pre><code>from_v1(tms: Dict) -&gt; TileMatrixSet\n</code></pre> <p>Makes a TMS from a v1 TMS definition</p> <pre><code>    Attributes\n</code></pre> <p>supportedCRS: CRS     Tile Matrix Set coordinate reference system title: str     Title of TMS abstract: str (optional)     Abstract of CRS keywords: str (optional)     Keywords identifier: str     TMS Identifier wellKnownScaleSet: AnyHttpUrl (optional)     WKSS URL boundingBox: TMSBoundingBox (optional)     Bounding box of TMS tileMatrix: List[TileMatrix]     List of Tile Matrices</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.from_v1--returns","title":"Returns:","text":"<p>TileMatrixSet</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.intersect_tms","title":"intersect_tms","text":"<pre><code>intersect_tms(bbox: BoundingBox) -&gt; bool\n</code></pre> <p>Check if a bounds intersects with the TMS bounds.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.is_valid","title":"is_valid","text":"<pre><code>is_valid(*tile: Tile, strict: bool = True) -&gt; bool\n</code></pre> <p>Check if a tile is valid.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.lnglat","title":"lnglat","text":"<pre><code>lnglat(x: float, y: float, truncate: bool = False) -&gt; Coords\n</code></pre> <p>Transform point(x,y) to geographic longitude and latitude.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.lr","title":"lr","text":"<pre><code>lr(*tile: Tile) -&gt; Coords\n</code></pre> <p>Return the lower right coordinates of the tile in geographic coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.lr--attributes","title":"Attributes","text":"<p>tile (tuple or Tile): (x, y, z) tile coordinates or a Tile object we want the lower right geographic coordinates of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.lr--returns","title":"Returns","text":"<p>Coords: The lower right geographic coordinates of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.matrix","title":"matrix","text":"<pre><code>matrix(zoom: int) -&gt; TileMatrix\n</code></pre> <p>Return the TileMatrix for a specific zoom.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.minmax","title":"minmax","text":"<pre><code>minmax(zoom: int) -&gt; Dict\n</code></pre> <p>Return TileMatrix Extrema.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.minmax--parameters","title":"Parameters","text":"<p>zoom : int     The zoom level.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.minmax--returns","title":"Returns","text":"<p>Dict</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.neighbors","title":"neighbors","text":"<pre><code>neighbors(*tile: Tile) -&gt; List[Tile]\n</code></pre> <p>The neighbors of a tile</p> <p>The neighbors function makes no guarantees regarding neighbor tile ordering.</p> <p>The neighbors function returns up to eight neighboring tiles, where tiles will be omitted when they are not valid.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.neighbors--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.neighbors--returns","title":"Returns","text":"<p>list</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.parent","title":"parent","text":"<pre><code>parent(*tile: Tile, zoom: int = None)\n</code></pre> <p>Get the parent of a tile</p> <p>The parent is the tile of one zoom level lower that contains the given \"child\" tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.parent--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z. zoom : int, optional     Determines the zoom level of the returned parent tile.     This defaults to one lower than the tile (the immediate parent).</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.parent--returns","title":"Returns","text":"<p>list: list of Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey","title":"quadkey","text":"<pre><code>quadkey(*tile: Tile) -&gt; str\n</code></pre> <p>Get the quadkey of a tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey--returns","title":"Returns","text":"<p>str</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey_to_tile","title":"quadkey_to_tile","text":"<pre><code>quadkey_to_tile(qk: str) -&gt; Tile\n</code></pre> <p>Get the tile corresponding to a quadkey</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey_to_tile--parameters","title":"Parameters","text":"<p>qk : str     A quadkey string.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.quadkey_to_tile--returns","title":"Returns","text":"<p>Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.set_geographic_crs","title":"set_geographic_crs","text":"<pre><code>set_geographic_crs(crs: CRS) -&gt; None\n</code></pre> <p>Overwrite Geographic CRS for the TMS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.sort_tile_matrices","title":"sort_tile_matrices","text":"<pre><code>sort_tile_matrices(v)\n</code></pre> <p>Sort matrices by identifier</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tile","title":"tile","text":"<pre><code>tile(lng: float, lat: float, zoom: int, truncate=False, ignore_coalescence: bool = False, geographic_crs: Optional[CRS] = None) -&gt; Tile\n</code></pre> <p>Get the tile for a given geographic longitude and latitude pair.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tile--parameters","title":"Parameters","text":"<p>lng, lat : float     A longitude and latitude pair in geographic coordinate reference system. zoom : int     The zoom level. truncate : bool     Whether or not to truncate inputs to limits of TMS geographic bounds. ignore_coalescence : bool     Whether or not to ignore coalescence factor for TMS with variable matrix width. geographic_crs: pyproj.CRS, optional     Geographic CRS of the given coordinates. Default to TMS's Geographic CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tile--returns","title":"Returns","text":"<p>Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tiles","title":"tiles","text":"<pre><code>tiles(west: float, south: float, east: float, north: float, zooms: Sequence[int], truncate: bool = False, geographic_crs: Optional[CRS] = None) -&gt; Iterator[Tile]\n</code></pre> <p>Get the tiles overlapped by a geographic bounding box</p> <p>Original code from github.com/mapbox/mercantile/blob/master/mercantile/__init__.py#L424</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tiles--parameters","title":"Parameters","text":"<p>west, south, east, north : sequence of float     Bounding values in decimal degrees (geographic CRS). zooms : int or sequence of int     One or more zoom levels. truncate : bool, optional     Whether or not to truncate inputs to TMS limits. geographic_crs: pyproj.CRS, optional     Geographic CRS of the given coordinates. Default to TMS's Geographic CRS</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tiles--yields","title":"Yields","text":"<p>Tile</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.tiles--notes","title":"Notes","text":"<p>A small epsilon is used on the south and east parameters so that this function yields exactly one tile when given the bounds of that same tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.ul","title":"ul","text":"<pre><code>ul(*tile: Tile) -&gt; Coords\n</code></pre> <p>Return the upper left coordinates of the tile in geographic coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.ul--attributes","title":"Attributes","text":"<p>tile (tuple or Tile): (x, y, z) tile coordinates or a Tile object we want the upper left geographic coordinates of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.ul--returns","title":"Returns","text":"<p>Coords: The upper left geographic coordinates of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.xy","title":"xy","text":"<pre><code>xy(lng: float, lat: float, truncate: bool = False) -&gt; Coords\n</code></pre> <p>Transform geographic longitude and latitude coordinates to TMS CRS.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.xy_bounds","title":"xy_bounds","text":"<pre><code>xy_bounds(*tile: Tile) -&gt; BoundingBox\n</code></pre> <p>Return the bounding box of the tile in TMS coordinate reference system.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.xy_bounds--attributes","title":"Attributes","text":"<p>tile: A tuple of (x, y, z) tile coordinates or a Tile object we want the bounding box of.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.xy_bounds--returns","title":"Returns","text":"<p>BoundingBox: The bounding box of the input tile.</p>"},{"location":"api/morecantile/models/#morecantile.models.TileMatrixSet.zoom_for_res","title":"zoom_for_res","text":"<pre><code>zoom_for_res(res: float, max_z: Optional[int] = None, zoom_level_strategy: str = 'auto', min_z: Optional[int] = None) -&gt; int\n</code></pre> <p>Get TMS zoom level corresponding to a specific resolution.</p> <p>Parameters:</p> <ul> <li> <code>res</code>               (<code>float</code>)           \u2013            <p>Resolution in TMS unit.</p> </li> <li> <code>max_z</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Maximum zoom level (default is tms maxzoom).</p> </li> <li> <code>zoom_level_strategy</code>               (<code>str</code>, default:                   <code>'auto'</code> )           \u2013            <p>Strategy to determine zoom level (same as in GDAL 3.2). LOWER will select the zoom level immediately below the theoretical computed non-integral zoom level. On the contrary, UPPER will select the immediately above zoom level. Defaults to AUTO which selects the closest zoom level. ref: gdal.org/drivers/raster/cog.html#raster-cog</p> </li> <li> <code>min_z</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Minimum zoom level (default is tms minzoom).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>TMS zoom for a given resolution.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; zoom_for_res(430.021)\n</code></pre>"},{"location":"api/morecantile/models/#morecantile.models.variableMatrixWidth","title":"variableMatrixWidth","text":"<p>               Bases: <code>BaseModel</code></p> <p>Variable Matrix Width Definition</p> <p>ref: github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/variableMatrixWidth.json</p>"},{"location":"api/morecantile/models/#morecantile.models.CRS_to_uri","title":"CRS_to_uri","text":"<pre><code>CRS_to_uri(crs: CRS) -&gt; str\n</code></pre> <p>Convert CRS to URI.</p>"},{"location":"api/morecantile/models/#morecantile.models.crs_axis_inverted","title":"crs_axis_inverted","text":"<pre><code>crs_axis_inverted(crs: CRS) -&gt; bool\n</code></pre> <p>Check if CRS has inverted AXIS (lat,lon) instead of (lon,lat).</p>"},{"location":"api/morecantile/models/#morecantile.models.ordered_axis_inverted","title":"ordered_axis_inverted","text":"<pre><code>ordered_axis_inverted(ordered_axes: List[str]) -&gt; bool\n</code></pre> <p>Check if ordered axes have inverted AXIS (lat,lon) instead of (lon,lat).</p>"},{"location":"api/morecantile/utils/","title":"morecantile.utils","text":""},{"location":"api/morecantile/utils/#morecantile.utils","title":"morecantile.utils","text":"<p>morecantile utils.</p>"},{"location":"api/morecantile/utils/#morecantile.utils._parse_tile_arg","title":"_parse_tile_arg","text":"<pre><code>_parse_tile_arg(*args) -&gt; Tile\n</code></pre> <p>Parse the *tile arg of module functions</p> <p>Copy from github.com/mapbox/mercantile/blob/master/mercantile/__init__.py</p>"},{"location":"api/morecantile/utils/#morecantile.utils._parse_tile_arg--parameters","title":"Parameters","text":"<p>tile : Tile or sequence of int     May be be either an instance of Tile or 3 ints, X, Y, Z.</p>"},{"location":"api/morecantile/utils/#morecantile.utils._parse_tile_arg--returns","title":"Returns","text":"<p>Tile</p>"},{"location":"api/morecantile/utils/#morecantile.utils._parse_tile_arg--raises","title":"Raises","text":"<p>TileArgParsingError</p>"},{"location":"api/morecantile/utils/#morecantile.utils.bbox_to_feature","title":"bbox_to_feature","text":"<pre><code>bbox_to_feature(west: float, south: float, east: float, north: float) -&gt; Dict\n</code></pre> <p>Create a GeoJSON feature from a bbox.</p>"},{"location":"api/morecantile/utils/#morecantile.utils.check_quadkey_support","title":"check_quadkey_support","text":"<pre><code>check_quadkey_support(tms: List) -&gt; bool\n</code></pre> <p>Check if a Tile Matrix Set supports quadkeys</p>"},{"location":"api/morecantile/utils/#morecantile.utils.is_power_of_two","title":"is_power_of_two","text":"<pre><code>is_power_of_two(number: int) -&gt; bool\n</code></pre> <p>Check if a number is a power of 2</p>"},{"location":"api/morecantile/utils/#morecantile.utils.lons_contain_antimeridian","title":"lons_contain_antimeridian","text":"<pre><code>lons_contain_antimeridian(lon1: float, lon2: float) -&gt; bool\n</code></pre> <p>Check if the antimeridian (180<sup>th</sup> meridian) is between two longitude points</p>"},{"location":"api/morecantile/utils/#morecantile.utils.lons_contain_antimeridian--parameters","title":"Parameters","text":"<p>lon1: float     The first longitude. lon2: float     The second longitude</p>"},{"location":"api/morecantile/utils/#morecantile.utils.lons_contain_antimeridian--returns","title":"Returns","text":"<p>A bool representing whether two longs contain the 180<sup>th</sup> meridian.</p>"},{"location":"api/morecantile/utils/#morecantile.utils.meters_per_unit","title":"meters_per_unit","text":"<pre><code>meters_per_unit(crs: CRS) -&gt; float\n</code></pre> <p>Coefficient to convert the coordinate reference system (CRS) units into meters (metersPerUnit).</p> <p>From note g in docs.opengeospatial.org/is/17-083r2/17-083r2.html#table_2:     If the CRS uses meters as units of measure for the horizontal dimensions,     then metersPerUnit=1; if it has degrees, then metersPerUnit=2pa/360     (a is the Earth maximum radius of the ellipsoid).</p>"},{"location":"api/morecantile/utils/#morecantile.utils.point_in_bbox","title":"point_in_bbox","text":"<pre><code>point_in_bbox(point: Coords, bbox: BoundingBox, precision: int = 5) -&gt; bool\n</code></pre> <p>Check if a point is in a bounding box.</p>"},{"location":"api/morecantile/utils/#morecantile.utils.to_rasterio_crs","title":"to_rasterio_crs","text":"<pre><code>to_rasterio_crs(incrs: CRS)\n</code></pre> <p>Convert a pyproj CRS to a rasterio CRS</p>"},{"location":"api/morecantile/utils/#morecantile.utils.truncate_coordinates","title":"truncate_coordinates","text":"<pre><code>truncate_coordinates(lng: float, lat: float, bbox: BoundingBox) -&gt; Tuple[float, float]\n</code></pre> <p>Truncate coordinates to a given bbox.</p> <p>Adapted from github.com/mapbox/mercantile/blob/master/mercantile/__init__.py</p>"}]}